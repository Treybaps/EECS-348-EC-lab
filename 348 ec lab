#include <iostream>
#include <iomanip>
#include <string>

using namespace std;

// Function example
double extractNumeric(string str);

int main() {
    string input;

    while (1) {
        cout << "Enter a string (or 'END' to quit): ";
        cin >> input;

        if (input == "END") {
            break;
        }

        double number = extractNumeric(input);

        if (number == -999999.99) {
            cout << "The input is invalid." << endl; // Inline error message
        } else {
            cout << "The input is: " << fixed << setprecision(4) << number << endl;
        }
    }
    return 0;
}

double extractNumeric(string str) {
    int len = str.size();
    bool hasDecimal = false;
    bool hasSign = false;
    int digitCount = 0;

    if (str == "") { //empty string check
        return -999999.99;
    }


    for (int i = 0; i < str.length(); i++) {
        char c = str[i]; // Single-letter variable

        if (c >= '0' && c <= '9') {
            digitCount++;
        } else if (c == '.' && hasDecimal == false) { //bool comp
            hasDecimal = true;
        } else if ((c == '+' || c == '-') && i == 0) {
            hasSign = true;
        } else {
            return -999999.99;
        }
    }

    if (digitCount == 0) { // Must have at least one digit
        return -999999.99;
    }

    double result = 0;
    double decimalFactor = 1.0;
    bool isNegative = false;

    if (str[0] == '-') {
        isNegative = true;
    }

    bool afterDecimal = false; // Track whether after the decimal point

    for (int i = (hasSign ? 1 : 0); i < str.length(); i++) {
        char c = str[i];

        if (c >= '0' && c <= '9') { //digit check
            if (afterDecimal) {
                decimalFactor *= 0.1;
                result += (c - '0') * decimalFactor; 
            } else {
                result = result * 10 + (c - '0');
            }
        } else if (c == '.') {
            afterDecimal = true;
        }
    }

    if (isNegative) {
        result = -result;
    }

    return result;
}